## Command aliases
setopt complete_aliases

alias tmux='nocorrect tmux'

alias du="du -h"
alias df="df -h"
alias gr="grep --color=auto -EDUIn"

alias doing="vim $HOME/Dropbox/plaintexts/doing/todo.txt"
alias plan="vim $HOME/Dropbox/plaintexts/planning.taskpaper"

alias edit-cheatsheet="vim $HOME/Dropbox/Work/cheatsheet.md"

alias git-first-commit="git log --date-order --format=%cI | tail -1"
alias git-commiter-last-month="git shortlog --summary --since='1 month ago'"

alias vi='vim'
alias v='vim'

alias ls='ls -GF'
alias la='ls -aF'
alias ll='ls -lF'
alias lsa='ls -laF'

if exists "exa"; then
  alias e='exa -l'
  alias et='exa -lT'
  alias eg='exa -hl --git'

  alias l='exa -lhg'
  alias ls='exa -lhg --git --git-ignore'
  alias la='exa -lhga --git'
  alias ll='exa -lhga --git --git-ignore'
  alias lt='exa -lhgT --git --git-ignore'
fi

if exists "bat"; then
  alias b='bat'
  export BAT_CONFIG_PATH="$HOME/.bat.conf"
fi

if exists "fd"; then
  alias f='fd'
fi

alias gs='git status'
alias gss='status --short --branch'

# http://grml.org/zsh/zsh-lovers.html
alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'
alias -g EG='|& egrep'
alias -g EH='|& head'
alias -g EL='|& less'
alias -g ELS='|& less -S'
alias -g ETL='|& tail -20'
alias -g ET='|& tail'

#alias gsa='git stash apply'
#alias gsx='git stash drop'
#alias gsX='git-stash-clear-interactive'
#alias gsl='git stash list'
#alias gsL='git-stash-dropped'
#alias gsd='git stash show --patch --stat'
#alias gsp='git stash pop'
#alias gsr='git-stash-recover'
#alias gss='git stash save --include-untracked'
#alias gsS='git stash save --patch --no-keep-index'
#alias gsw='git stash save --include-untracked --keep-index'

# prezto aliase refarence
#
# directory
#  - `d` prints the contents of the directory stack.
#  - `1 ... 9` changes the directory to the **n** previous one.
# tmux
#  - `tmuxa` attaches or switches to a tmux session.
#  - `tmuxl` lists sessions managed by the tmux server.
#
# git
#  - `g` is short for `git`.
#### Branch
#  - `gb` lists, creates, renames, and deletes branches.
#  - `gbc` creates a new branch.
#  - `gbl` lists branches and their commits. (also `gbv`)
#  - `gbL` lists all local and remote branches and their commits.
#  - `gbr` renames a branch. (also `gbm`)
#  - `gbR` renames a branch even if the new branch name already exists. (also
#    `gbM`)
#  - `gbs` lists branches and their commits with ancestry graphs.
#  - `gbS` lists local and remote branches and their commits with ancestry
#    graphs.
#  - `gbV` lists branches with more verbose information about their commits.
#  - `gbx` deletes a branch. (also `gbd`)
#  - `gbX` deletes a branch irrespective of its merged status. (also `gbD`)
#### Commit
#  - `gc` records changes to the repository.
#  - `gca` stages all modified and deleted files.
#  - `gcm` records changes to the repository with the given message.
#  - `gcS` records changes to the repository. (Signed)
#  - `gcSa` stages all modified and deleted files. (Signed)
#  - `gcSm` records changes to the repository with the given message. (Signed)
#  - `gcam` stages all modified and deleted files, and records changes to the repository with the given message.
#  - `gco` checks out a branch or paths to work tree.
#  - `gcO` checks out hunks from the index or the tree interactively.
#  - `gcf` amends the tip of the current branch using the same log message as *HEAD*.
#  - `gcSf` amends the tip of the current branch using the same log message as *HEAD*. (Signed)
#  - `gcF` amends the tip of the current branch.
#  - `gcSF` amends the tip of the current branch. (Signed)
#  - `gcp` applies changes introduced by existing commits.
#  - `gcP` applies changes introduced by existing commits without committing.
#  - `gcr` reverts existing commits by reverting patches and recording new
#     commits.
#  - `gcR` removes the *HEAD* commit.
#  - `gcs` displays various types of objects.
#  - `gcsS` displays commits with GPG signature.
#  - `gcl` lists lost commits.
#  - `gcy` displays commits yet to be applied to upstream in the short format.
#  - `gcY` displays commits yet to be applied to upstream.
#### Conflict
#  - `gCl` lists unmerged files.
#  - `gCa` adds unmerged file contents to the index.
#  - `gCe` executes merge-tool on all unmerged file.
#  - `gCo` checks out our changes for unmerged paths.
#  - `gCO` checks out our changes for all unmerged paths.
#  - `gCt` checks out their changes for unmerged paths.
#  - `gCT` checks out their changes for all unmerged paths.
#### Data
#  - `gd` displays information about files in the index and the work tree.
#  - `gdc` lists cached files.
#  - `gdx` lists deleted files.
#  - `gdm` lists modified files.
#  - `gdu` lists untracked files.
#  - `gdk` lists killed files.
#  - `gdi` lists ignored files.
#
#### Fetch
#
#  - `gf` downloads objects and references from another repository.
#  - `gfa` downloads objects and references from all remote repositories.
#  - `gfc` clones a repository into a new directory.
#  - `gfcr` clones a repository into a new directory including all submodules.
#  - `gfm` fetches from and merges with another repository or local branch.
#  - `gfr` fetches from and rebases on another repository or local branch.
#### Grep
#  - `gg` displays lines matching a pattern.
#  - `ggi` displays lines matching a pattern ignoring case.
#  - `ggl` lists files matching a pattern.
#  - `ggL` lists files that are not matching a pattern.
#  - `ggv` displays lines not matching a pattern.
#  - `ggw` displays lines matching a pattern at word boundary.
#### Index
#  - `gia` adds file contents to the index.
#  - `giA` adds file contents to the index interactively.
#  - `giu` adds file contents to the index (updates only known files).
#  - `gid` displays changes between the index and a named commit (diff).
#  - `giD` displays changes between the index and a named commit (word diff).
#  - `gii` temporarily ignore differences in a given file.
#  - `giI` unignore differences in a given file.
#  - `gir` resets the current HEAD to the specified state.
#  - `giR` resets the current index interactively.
#  - `gix` removes files/directories from the index (recursively).
#  - `giX` removes files/directories from the index (recursively and forced).
#### Log
#  - `gl` displays the log.
#  - `gls` displays the stats log.
#  - `gld` displays the diff log.
#  - `glo` displays the one line log.
#  - `glg` displays the graph log.
#  - `glb` displays the brief commit log.
#  - `glc` displays the commit count for each contributor in descending order.
#  - `glS` displays the log and checks the validity of signed commits.
#### Merge
#  - `gm` joins two or more development histories together.
#  - `gmC` joins two or more development histories together but does not commit.
#  - `gmF` joins two or more development histories together but does not commit
#     generating a merge commit even if the merge resolved as a fast-forward.
#  - `gma` aborts the conflict resolution, and reconstructs the pre-merge state.
#  - `gmt` runs the merge conflict resolution tools to resolve conflicts.
#### Push
#  - `gp` updates remote refs along with associated objects.
#  - `gpf` forcefully updates remote refs along with associated objects using the safer `--force-with-lease` option.
#  - `gpF` forcefully updates remote refs along with associated objects using the riskier `--force` option.
#  - `gpa` updates remote branches along with associated objects.
#  - `gpA` updates remote branches and tags along with associated objects.
#  - `gpt` updates remote tags along with associated objects.
#  - `gpc` updates remote refs along with associated objects and adds *origin*
#     as an upstream reference for the current branch.
#  - `gpp` pulls and pushes from origin to origin.
#### Rebase
#  - `gr` forward-ports local commits to the updated upstream head.
#  - `gra` aborts the rebase.
#  - `grc` continues the rebase after merge conflicts are resolved.
#  - `gri` makes a list of commits to be rebased and opens the editor.
#  - `grs` skips the current patch.
#### Remote
#  - `gR` manages tracked repositories.
#  - `gRl` lists remote names and their URLs.
#  - `gRa` adds a new remote.
#  - `gRx` removes a remote.
#  - `gRm` renames a remote.
#  - `gRu` fetches remotes updates.
#  - `gRp` prunes all stale remote tracking branches.
#  - `gRs` displays information about a given remote.
#  - `gRb` opens a remote on [GitHub][3] in the default browser.
#### Stash
#  - `gs` stashes the changes of the dirty working directory.
#  - `gsa` applies the changes recorded in a stash to the working directory.
#  - `gsx` drops a stashed state.
#  - `gsX` drops all the stashed states.
#  - `gsl` lists stashed states.
#  - `gsL` lists dropped stashed states.
#  - `gsd` displays changes between the stash and its original parent.
#  - `gsp` removes and applies a single stashed state from the stash list.
#  - `gsr` recovers a given stashed state.
#  - `gss` stashes the changes of the dirty working directory, including untracked.
#  - `gsS` stashes the changes of the dirty working directory interactively.
#  - `gsw` stashes the changes of the dirty working directory retaining the index.
#### Submodule
#  - `gS` initializes, updates, or inspects submodules.
#  - `gSa` adds given a repository as a submodule.
#  - `gSf` evaluates a shell command in each of checked out submodules.
#  - `gSi` initializes submodules.
#  - `gSI` initializes and clones submodules recursively.
#  - `gSl` lists the commits of all submodules.
#  - `gSm` moves a submodule.
#  - `gSs` synchronizes submodules' remote URL to the value specified in
#    .gitmodules.
#  - `gSu` fetches and merges the latest changes for all submodule.
#  - `gSx` removes a submodule.
#### Tag
#  - `gt` lists tags or creates tag.
#  - `gtl` lists tags matching pattern.
#  - `gts` creates a signed tag.
#  - `gtv` validate a signed tag.
#### Working directory
#  - `gws` displays working-tree status in the short format.
#  - `gwS` displays working-tree status.
#  - `gwd` displays changes between the working tree and the index (diff).
#  - `gwD` displays changes between the working tree and the index (word diff).
#  - `gwr` resets the current HEAD to the specified state, does not touch the
#     index nor the working tree.
#  - `gwR` resets the current HEAD, index and working tree to the specified state.
#  - `gwc` removes untracked files from the working tree (dry-run).
#  - `gwC` removes untracked files from the working tree.
#  - `gwx` removes files from the working tree and from the index recursively.
#  - `gwX` removes files from the working tree and from the index recursively and
#    forcefully.
# ruby
#  - `rb` is short for `ruby`.
#### Bundler
#  - `rbb` manages ruby dependencies (`bundle`).
#  - `rbbc` cleans up unused gems in your bundler directory.
#  - `rbbe` executes a script in the context of the current bundle.
#  - `rbbi` installs the gems specified in the `Gemfile` in `vendor/bundle`.
#  - `rbbI` installs the following:
#    - gems specified in the `Gemfile` in `vendor/bundle`.
#    - packages the gems into `vendor/cache`.
#    - appends bundler directories to  `.gitignore`.
#  - `rbbl` lists all gems in the current bundle.
#  - `rbbo` opens an installed gem in the editor.
#  - `rbbp` packages gem files into `vendor/cache`.
#  - `rbbu` updates gems to their latest version.
# rails
#  - `ror` is short for `rails`.
#  - `rorc` starts the Rails console.
#  - `rordc` starts the Rails console connected to the database.
#  - `rordm` migrates the database.
#  - `rordM` migrates the database and recreates the test database.
#  - `rordr` rolls the database schema back to the previous version.
#  - `rorg` generates new code.
#  - `rorl` displays the log.
#  - `rorlc` truncates logs to zero bytes.
#  - `rorp` installs a plugin.
#  - `rorr` runs code in the application environment.
#  - `rors` starts the Rails server.
#  - `rorsd` starts the Rails server with the debugger.
#  - `rorx` destroys newly generated code.

